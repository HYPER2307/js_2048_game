{"version":3,"sources":["scripts/main.js"],"names":["gameScore","document","querySelector","messageStart","messageLose","messageWin","board","rows","cols","score","hasAvailableMerge","updateTile","tile","num","innerText","classList","value","add","r","fieldRows","querySelectorAll","fieldRow","fieldCells","c","id","renderBoard","cell","getElementById","setNumberToRandomCell","emptyCells","push","row","col","length","randomNumber","Math","random","prevIndex","i","randomIndex","floor","filterZero","preparedRow","filter","updateGameScore","newScore","slide","newRow","JSON","stringify","slideLeft","slideRight","reverse","ceil","slideUp","slideDown","hasAvailableMoves","isAvailable","hasWinCell","isWin","forEach","resetGame","setGame","moves","addEventListener","key","hasOwnProperty","remove","target","start","closest","restart","style","fontSize"],"mappings":";AAAA,aA8BA,IA5BA,IAAMA,EAAYC,SAASC,cAAc,eACnCC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAaJ,SAASC,cAAc,gBAEtCI,EAAQ,CACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGNC,EAAO,EACPC,EAAO,EACTC,EAAQ,EACRC,GAAoB,EAElBC,EAAa,SAACC,EAAMC,GACxBD,EAAKE,UAAY,GACjBF,EAAKG,UAAUC,MAAQ,GACvBJ,EAAKG,UAAUE,IAAI,cAEfJ,EAAM,IACRD,EAAKE,UAAYD,EACjBD,EAAKG,UAAUE,IAAmBJ,eAAAA,OAAAA,MAI7BK,EAAI,EAAGA,EAAIX,EAAMW,IAKnB,IAJCC,IAAAA,EAAYlB,SAASmB,iBAAiB,cACtCC,EAAWF,EAAUD,GACrBI,EAAaD,EAASD,iBAAiB,eAEpCG,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CACvBX,IAAAA,EAAOU,EAAWC,GAExBX,EAAKY,GAAKN,EAAI,IAAMK,EAEdV,IAAAA,EAAMP,EAAMY,GAAGK,GAErBZ,EAAWC,EAAMC,GAIrB,IAAMY,EAAc,WACb,IAAA,IAAIP,EAAI,EAAGA,EAAIX,EAAMW,IACnB,IAAA,IAAIK,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CACvBG,IAAAA,EAAOzB,SAAS0B,eAAkBT,GAAAA,OAAAA,EAAKK,KAAAA,OAAAA,IAEvCV,EAAMP,EAAMY,GAAGK,GAErBZ,EAAWe,EAAMb,KAKjBe,EAAwB,WAGvB,IAFCC,IAAAA,EAAa,GAEVX,EAAI,EAAGA,EAAIX,EAAMW,IACnB,IAAA,IAAIK,EAAI,EAAGA,EAAIf,EAAMe,IACJ,IAAhBjB,EAAMY,GAAGK,IACXM,EAAWC,KAAK,CACdC,IAAKb,EACLc,IAAKT,IAMTM,GAAAA,EAAWI,QAAUvB,EAAmB,CACpCwB,IAAAA,EAAeC,KAAKC,SAEtBP,GAAAA,EAAWI,SAAW1B,EAAOC,EAG1B,IAFD6B,IAAAA,EAEKC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpBC,IAAAA,EAAcJ,KAAKK,MAAML,KAAKC,SAAWP,EAAWI,QAErCJ,EAAAA,EADPU,IAAgBF,EAAY,EAAIE,GACtCR,EAAAA,EAAAA,IAAKC,EAAAA,EAAAA,IAEbK,EAAYE,EACZjC,EAAMyB,GAAKC,GAAO,MAEf,CACCO,IACeV,EAAAA,EADDM,KAAKK,MAAML,KAAKC,SAAWP,EAAWI,SAClDF,EAAAA,EAAAA,IAAKC,EAAAA,EAAAA,IAEb1B,EAAMyB,GAAKC,GAAOE,EAAe,GAAM,EAAI,EAG7CT,MAIEgB,EAAa,SAACV,GAGXW,OAFaX,EAAIY,OAAO,SAAA9B,GAAOA,OAAQ,IAARA,KAKlC+B,EAAkB,SAACC,GACvB7C,EAAUc,UAAY+B,EACtB7C,EAAUgB,MAAqB,IAAb6B,EAAoBA,GAAAA,OAAAA,GAAa,IAG/CC,EAAQ,SAACf,GAGR,IAFDgB,IAAAA,EAASN,EAAWV,GAEfO,EAAI,EAAGA,EAAIS,EAAOd,OAAS,EAAGK,IACjCS,EAAOT,KAAOS,EAAOT,EAAI,KAC3BS,EAAOT,IAAM,EACbS,EAAOT,EAAI,GAAK,EAChB7B,GAASsC,EAAOT,GAChB5B,GAAoB,GAQjBqC,IAJPH,EAAgBnC,GAEhBsC,EAASN,EAAWM,GAEbA,EAAOd,OAASzB,GACrBuC,EAAOjB,KAAK,GAYPiB,OATmBC,KAAKC,UAAUF,KAClBC,KAAKC,UAAUlB,KAKpCrB,GAAoB,GAGfqC,GAGHG,EAAY,WAChBxC,GAAoB,EAEf,IAAA,IAAIQ,EAAI,EAAGA,EAAIX,EAAMW,IAAK,CAC7BZ,EAAMY,GAAK4B,EAAMxC,EAAMY,IAElB,IAAA,IAAIK,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CACvBG,IAAAA,EAAOzB,SAAS0B,eAAkBT,GAAAA,OAAAA,EAAKK,KAAAA,OAAAA,IAE7CZ,EAAWe,EAAMpB,EAAMY,GAAGK,OAK1B4B,EAAa,WACjBzC,GAAoB,EAEf,IAAA,IAAIQ,EAAI,EAAGA,EAAIX,EAAMW,IAAK,CACzBa,IAAAA,EAAMzB,EAAMY,GAAGkC,UAEnBrB,EAAMe,EAAMf,GAAKqB,UACjB9C,EAAMY,GAAKa,EAEN,IAAA,IAAIR,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CACvB8B,IAAAA,EAAOpD,SAAS0B,eAAkBT,GAAAA,OAAAA,EAAKK,KAAAA,OAAAA,IAE7CZ,EAAW0C,EAAM/C,EAAMY,GAAGK,OAK1B+B,EAAU,WACd5C,GAAoB,EAEf,IAAA,IAAIa,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CACzBQ,IAAAA,EAAM,CAACzB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,IAE3DQ,EAAMe,EAAMf,GAEP,IAAA,IAAIb,EAAI,EAAGA,EAAIX,EAAMW,IAAK,CAC7BZ,EAAMY,GAAGK,GAAKQ,EAAIb,GAClBZ,EAAMY,GAAGK,GAAKQ,EAAIb,GAClBZ,EAAMY,GAAGK,GAAKQ,EAAIb,GAClBZ,EAAMY,GAAGK,GAAKQ,EAAIb,GAEZmC,IAAAA,EAAOpD,SAAS0B,eAAkBT,GAAAA,OAAAA,EAAKK,KAAAA,OAAAA,IAE7CZ,EAAW0C,EAAM/C,EAAMY,GAAGK,OAK1BgC,EAAY,WAChB7C,GAAoB,EAEf,IAAA,IAAIa,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CACzBQ,IAAAA,EAAM,CAACzB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,IAAI6B,UAE/DrB,EAAMe,EAAMf,GAAKqB,UAEjB9C,EAAM,GAAGiB,GAAKQ,EAAI,GAClBzB,EAAM,GAAGiB,GAAKQ,EAAI,GAClBzB,EAAM,GAAGiB,GAAKQ,EAAI,GAClBzB,EAAM,GAAGiB,GAAKQ,EAAI,GAEb,IAAA,IAAIb,EAAI,EAAGA,EAAIX,EAAMW,IAAK,CACvBmC,IAAAA,EAAOpD,SAAS0B,eAAkBT,GAAAA,OAAAA,EAAKK,KAAAA,OAAAA,IAE7CZ,EAAW0C,EAAM/C,EAAMY,GAAGK,OAK1BiC,EAAoB,WAGnB,IAFDC,IAAAA,GAAc,EAETvC,EAAI,EAAGA,EAAIX,EAAMW,IAGnB,IAFCa,IAAAA,EAAMzB,EAAMY,GAETK,EAAI,EAAGA,EAAIf,EAAO,EAAGe,IACxBQ,EAAIR,KAAOQ,EAAIR,EAAI,IAAiB,IAAXQ,EAAIR,KAC/BkC,GAAc,GAKf,IAAA,IAAIlC,EAAI,EAAGA,EAAIf,EAAMe,IAGnB,IAFCQ,IAAAA,EAAM,CAACzB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,GAAIjB,EAAM,GAAGiB,IAEpDL,EAAI,EAAGA,EAAIX,EAAMW,IACpBa,EAAIb,KAAOa,EAAIb,EAAI,IAAiB,IAAXa,EAAIb,KAC/BuC,GAAc,GAKbA,OAAAA,GAGHC,EAAa,WACbC,IAAAA,GAAQ,EAQLA,OANPrD,EAAMsD,QAAQ,SAAAlC,GACC,OAATA,IACFiC,GAAQ,KAILA,GAGHE,EAAY,WAChBnD,GAAoB,EAEpBJ,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZsB,IAIAgB,EAFAnC,EAAQ,GAIRL,EAAYW,UAAUE,IAAI,UAC1BZ,EAAWU,UAAUE,IAAI,WAGrB6C,EAAU,WACdlC,IAEAzB,EAAaY,UAAUE,IAAI,UAErB8C,IAAAA,EAAQ,CACC,UAAA,CACF,MAAA,WACPb,IACAtB,MAIU,WAAA,CACH,MAAA,WACPuB,IACAvB,MAIO,QAAA,CACA,MAAA,WACP0B,IACA1B,MAIS,UAAA,CACF,MAAA,WACP2B,IACA3B,OAKN3B,SAAS+D,iBAAiB,UAAW,SAAa,GAAVC,IAAAA,EAAAA,EAAAA,IACjCF,EAAMG,eAAeD,KAI1BF,EAAME,GAAKnB,QAENU,KACHpD,EAAYW,UAAUoD,OAAO,UAG3BT,KACFrD,EAAWU,UAAUoD,OAAO,cAKlClE,SAAS+D,iBAAiB,QAAS,SAAgB,GAAbI,IAAAA,EAAAA,EAAAA,OAC9BC,EAAQD,EAAOE,QAAQ,UACvBC,EAAUH,EAAOE,QAAQ,YAE3BD,IACFP,IAEAO,EAAMtD,UAAUoD,OAAO,SACvBE,EAAMtD,UAAUE,IAAI,WACpBoD,EAAMvD,UAAY,UAClBuD,EAAMG,MAAMC,SAAW,QAGrBF,GACFV","file":"main.b36e6af3.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst rows = 4;\nconst cols = 4;\nlet score = 0;\nlet hasAvailableMerge = true;\n\nconst updateTile = (tile, num) => {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n};\n\nfor (let r = 0; r < rows; r++) {\n  const fieldRows = document.querySelectorAll('.field-row');\n  const fieldRow = fieldRows[r];\n  const fieldCells = fieldRow.querySelectorAll('.field-cell');\n\n  for (let c = 0; c < cols; c++) {\n    const tile = fieldCells[c];\n\n    tile.id = r + '-' + c;\n\n    const num = board[r][c];\n\n    updateTile(tile, num);\n  }\n}\n\nconst renderBoard = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      const cell = document.getElementById(`${r}-${c}`);\n\n      const num = board[r][c];\n\n      updateTile(cell, num);\n    }\n  }\n};\n\nconst setNumberToRandomCell = () => {\n  const emptyCells = [];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      if (board[r][c] === 0) {\n        emptyCells.push({\n          row: r,\n          col: c,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length && hasAvailableMerge) {\n    const randomNumber = Math.random();\n\n    if (emptyCells.length === rows * cols) {\n      let prevIndex;\n\n      for (let i = 0; i < 2; i++) {\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const index = randomIndex === prevIndex ? 0 : randomIndex;\n        const { row, col } = emptyCells[index];\n\n        prevIndex = randomIndex;\n        board[row][col] = 2;\n      }\n    } else {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      board[row][col] = randomNumber < 0.9 ? 2 : 4;\n    }\n\n    renderBoard();\n  }\n};\n\nconst filterZero = (row) => {\n  const preparedRow = row.filter(num => num !== 0);\n\n  return preparedRow;\n};\n\nconst updateGameScore = (newScore) => {\n  gameScore.innerText = newScore;\n  gameScore.value = newScore !== 0 ? `${newScore}` : '';\n};\n\nconst slide = (row) => {\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      hasAvailableMerge = true;\n    }\n  }\n\n  updateGameScore(score);\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < cols) {\n    newRow.push(0);\n  }\n\n  const stringifiedNewRow = JSON.stringify(newRow);\n  const stringifiedRow = JSON.stringify(row);\n\n  const isEqual = stringifiedNewRow !== stringifiedRow;\n\n  if (isEqual) {\n    hasAvailableMerge = true;\n  }\n\n  return newRow;\n};\n\nconst slideLeft = () => {\n  hasAvailableMerge = false;\n\n  for (let r = 0; r < rows; r++) {\n    board[r] = slide(board[r]);\n\n    for (let c = 0; c < cols; c++) {\n      const cell = document.getElementById(`${r}-${c}`);\n\n      updateTile(cell, board[r][c]);\n    }\n  }\n};\n\nconst slideRight = () => {\n  hasAvailableMerge = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r].reverse();\n\n    row = slide(row).reverse();\n    board[r] = row;\n\n    for (let c = 0; c < cols; c++) {\n      const ceil = document.getElementById(`${r}-${c}`);\n\n      updateTile(ceil, board[r][c]);\n    }\n  }\n};\n\nconst slideUp = () => {\n  hasAvailableMerge = false;\n\n  for (let c = 0; c < cols; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n      board[r][c] = row[r];\n      board[r][c] = row[r];\n      board[r][c] = row[r];\n\n      const ceil = document.getElementById(`${r}-${c}`);\n\n      updateTile(ceil, board[r][c]);\n    }\n  }\n};\n\nconst slideDown = () => {\n  hasAvailableMerge = false;\n\n  for (let c = 0; c < cols; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]].reverse();\n\n    row = slide(row).reverse();\n\n    board[0][c] = row[0];\n    board[1][c] = row[1];\n    board[2][c] = row[2];\n    board[3][c] = row[3];\n\n    for (let r = 0; r < rows; r++) {\n      const ceil = document.getElementById(`${r}-${c}`);\n\n      updateTile(ceil, board[r][c]);\n    }\n  }\n};\n\nconst hasAvailableMoves = () => {\n  let isAvailable = false;\n\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    for (let c = 0; c < cols - 1; c++) {\n      if (row[c] === row[c + 1] || row[c] === 0) {\n        isAvailable = true;\n      }\n    }\n  }\n\n  for (let c = 0; c < cols; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    for (let r = 0; r < rows; r++) {\n      if (row[r] === row[r + 1] || row[r] === 0) {\n        isAvailable = true;\n      }\n    }\n  }\n\n  return isAvailable;\n};\n\nconst hasWinCell = () => {\n  let isWin = false;\n\n  board.forEach(cell => {\n    if (cell === 2048) {\n      isWin = true;\n    }\n  });\n\n  return isWin;\n};\n\nconst resetGame = () => {\n  hasAvailableMerge = true;\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  setNumberToRandomCell();\n\n  score = 0;\n\n  updateGameScore(score);\n\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n};\n\nconst setGame = () => {\n  setNumberToRandomCell();\n\n  messageStart.classList.add('hidden');\n\n  const moves = {\n    'ArrowLeft': {\n      'slide': () => {\n        slideLeft();\n        setNumberToRandomCell();\n      },\n    },\n\n    'ArrowRight': {\n      'slide': () => {\n        slideRight();\n        setNumberToRandomCell();\n      },\n    },\n\n    'ArrowUp': {\n      'slide': () => {\n        slideUp();\n        setNumberToRandomCell();\n      },\n    },\n\n    'ArrowDown': {\n      'slide': () => {\n        slideDown();\n        setNumberToRandomCell();\n      },\n    },\n  };\n\n  document.addEventListener('keydown', ({ key }) => {\n    if (!moves.hasOwnProperty(key)) {\n      return;\n    };\n\n    moves[key].slide();\n\n    if (!hasAvailableMoves()) {\n      messageLose.classList.remove('hidden');\n    }\n\n    if (hasWinCell()) {\n      messageWin.classList.remove('hidden');\n    }\n  });\n};\n\ndocument.addEventListener('click', ({ target }) => {\n  const start = target.closest('.start');\n  const restart = target.closest('.restart');\n\n  if (start) {\n    setGame();\n\n    start.classList.remove('start');\n    start.classList.add('restart');\n    start.innerText = 'Restart';\n    start.style.fontSize = '18px';\n  }\n\n  if (restart) {\n    resetGame();\n  }\n});\n"]}